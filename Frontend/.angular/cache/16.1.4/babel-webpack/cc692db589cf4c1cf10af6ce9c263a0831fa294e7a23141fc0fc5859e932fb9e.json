{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../authservice.service\";\nimport * as i3 from \"@angular/router\";\nexport class LoginComponent {\n  constructor(fb, authService) {\n    this.fb = fb;\n    this.authService = authService;\n  }\n  ngOnInit() {\n    this.loginForm = this.fb.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n  submitForm() {\n    if (this.loginForm.valid) {\n      const username = this.loginForm.get('username').value;\n      const password = this.loginForm.get('password').value;\n      this.authService.login(username, password).subscribe(response => {\n        // Handle successful login\n      }, error => {\n        // Handle login error\n      });\n    }\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthserviceService));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 25,\n  vars: 10,\n  consts: [[3, \"ngSubmit\"], [\"login\", \"ngForm\"], [1, \"mb-3\"], [\"for\", \"exampleInputEmail1\", 1, \"form-label\"], [\"type\", \"email\", \"id\", \"exampleInputEmail1\", \"name\", \"email\", \"required\", \"\", \"pattern\", \"^\\\\w+([\\\\.-]?\\\\w+)*@\\\\w+([\\\\.-]?\\\\w+)*(\\\\.\\\\w{2,3})+$\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"email\", \"ngModel\"], [\"id\", \"emailHelp\", 1, \"form-text\"], [1, \"text-danger\"], [\"for\", \"exampleInputPassword1\", 1, \"form-label\"], [\"type\", \"password\", \"id\", \"exampleInputPassword1\", \"name\", \"password\", \"required\", \"\", \"pattern\", \"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d).{6,}$\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"password\", \"ngModel\"], [1, \"mb-3\", \"form-check\"], [\"type\", \"checkbox\", \"id\", \"exampleCheck1\", 1, \"form-check-input\"], [\"routerLink\", \"Check\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0, 1);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.display();\n      });\n      i0.ɵɵelementStart(2, \"div\", 2)(3, \"label\", 3);\n      i0.ɵɵtext(4, \"Email address\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"input\", 4, 5);\n      i0.ɵɵlistener(\"ngModelChange\", function LoginComponent_Template_input_ngModelChange_5_listener($event) {\n        return ctx.User.email = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"div\", 6);\n      i0.ɵɵelementStart(8, \"small\", 7);\n      i0.ɵɵtext(9, \" Enter valid email\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(10, \"div\", 2)(11, \"label\", 8);\n      i0.ɵɵtext(12, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"input\", 9, 10);\n      i0.ɵɵlistener(\"ngModelChange\", function LoginComponent_Template_input_ngModelChange_13_listener($event) {\n        return ctx.User.password = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(15, \"div\", 6);\n      i0.ɵɵtext(16, \"> \");\n      i0.ɵɵelementStart(17, \"small\", 7);\n      i0.ɵɵtext(18, \" Enter valid password\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(19, \"div\", 11);\n      i0.ɵɵelement(20, \"input\", 12);\n      i0.ɵɵelementStart(21, \"a\", 13);\n      i0.ɵɵtext(22, \"Check me out\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(23, \"button\", 14);\n      i0.ɵɵtext(24, \"Submit\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      const _r1 = i0.ɵɵreference(6);\n      const _r2 = i0.ɵɵreference(14);\n      i0.ɵɵadvance(5);\n      i0.ɵɵclassProp(\"is-invalid\", _r1.invalid && _r1.touched);\n      i0.ɵɵproperty(\"ngModel\", ctx.User.email);\n      i0.ɵɵadvance(3);\n      i0.ɵɵclassProp(\"d-none\", _r1.valid || _r1.touched);\n      i0.ɵɵadvance(5);\n      i0.ɵɵclassProp(\"is-invalid\", _r2.invalid && _r2.touched);\n      i0.ɵɵproperty(\"ngModel\", ctx.User.password);\n      i0.ɵɵadvance(4);\n      i0.ɵɵclassProp(\"d-none\", _r2.valid || _r2.touched);\n    }\n  },\n  dependencies: [i3.RouterLink, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.PatternValidator, i1.NgModel, i1.NgForm],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["Validators","LoginComponent","constructor","fb","authService","ngOnInit","loginForm","group","username","required","password","submitForm","valid","get","value","login","subscribe","response","error","i0","ɵɵdirectiveInject","i1","FormBuilder","i2","AuthserviceService","selectors","decls","vars","consts","template","LoginComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","LoginComponent_Template_form_ngSubmit_0_listener","display","ɵɵtext","ɵɵelementEnd","LoginComponent_Template_input_ngModelChange_5_listener","$event","User","email","ɵɵelement","LoginComponent_Template_input_ngModelChange_13_listener","ɵɵadvance","ɵɵclassProp","_r1","invalid","touched","ɵɵproperty","_r2"],"sources":["C:\\Users\\ATHIRA\\Desktop\\kkemmar2023\\Employee_MEAN\\Frontend\\src\\app\\login\\login.component.ts","C:\\Users\\ATHIRA\\Desktop\\kkemmar2023\\Employee_MEAN\\Frontend\\src\\app\\login\\login.component.html"],"sourcesContent":["import { Component,OnInit } from '@angular/core';\nimport { FormsModule,ReactiveFormsModule,FormBuilder,FormGroup,Validators} from '@angular/forms';\nimport { AuthserviceService } from '../authservice.service';\n\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit{\n  \n  constructor(private fb: FormBuilder, private authService:AuthserviceService) { }\n\n  ngOnInit(): void {\n    this.loginForm = this.fb.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n\n  submitForm(): void {\n    if (this.loginForm.valid) {\n      const username = this.loginForm.get('username').value;\n      const password = this.loginForm.get('password').value;\n      this.authService.login(username, password).subscribe(\n        (response) => {\n          // Handle successful login\n        },\n        (error) => {\n          // Handle login error\n        }\n      );\n    }\n  }\n}\n\n","<form #login=\"ngForm\" (ngSubmit)=\"display()\">\n    <div class=\"mb-3\">\n      <label for=\"exampleInputEmail1\" class=\"form-label\">Email address</label>\n      <input type=\"email\" class=\"form-control\" id=\"exampleInputEmail1\"  name=\"email\"[(ngModel)]=\"User.email\" #email=\"ngModel\"[class.is-invalid]=\"email.invalid && email.touched\" required pattern=\"^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$\">\n      <div id=\"emailHelp\" class=\"form-text\"></div>\n    <small class=\"text-danger\"[class.d-none]=\"email.valid||email.touched\"> Enter valid email</small>\n    </div>\n    <div class=\"mb-3\">\n      <label for=\"exampleInputPassword1\" class=\"form-label\">Password</label>\n      <input type=\"password\" class=\"form-control\" id=\"exampleInputPassword1\" name=\"password\"[(ngModel)]=\"User.password\"#password=\"ngModel\"[class.is-invalid]=\"password.invalid && password.touched\" required pattern=\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{6,}$\">\n      <div id=\"emailHelp\" class=\"form-text\"></div>>\n      <small class=\"text-danger\"[class.d-none]=\"password.valid||password.touched\"> Enter valid password</small>\n    </div>\n    <div class=\"mb-3 form-check\">\n      <input type=\"checkbox\" class=\"form-check-input\" id=\"exampleCheck1\">\n      <a routerLink=\"Check\">Check me out</a>\n    </div>\n    <button type=\"submit\"   class=\"btn btn-primary\">Submit</button>\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}