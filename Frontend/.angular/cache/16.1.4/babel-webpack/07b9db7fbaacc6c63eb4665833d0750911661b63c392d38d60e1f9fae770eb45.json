{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class TokeninterceptorService {\n  constructor() {}\n  intercept(req, next) {\n    const token = localStorage.getItem('token');\n    let tokenizedrequest = req.clone({\n      setHeaders: {\n        Authorization: 'Bearer ' + token\n      }\n    });\n    return next.handle(tokenizedrequest);\n  }\n}\nTokeninterceptorService.ɵfac = function TokeninterceptorService_Factory(t) {\n  return new (t || TokeninterceptorService)();\n};\nTokeninterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TokeninterceptorService,\n  factory: TokeninterceptorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["TokeninterceptorService","constructor","intercept","req","next","token","localStorage","getItem","tokenizedrequest","clone","setHeaders","Authorization","handle","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ATHIRA\\Desktop\\kkemmar2023\\Employee_MEAN\\Frontend\\src\\app\\tokeninterceptor.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpEvent,HttpHandler,HttpInterceptor,HttpRequest} from '@angular/common/http'\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TokeninterceptorService implements HttpInterceptor {\n\n  constructor() { }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const token = localStorage.getItem('token')\n    let tokenizedrequest = req.clone({\n      setHeaders:{\n        Authorization:'Bearer '+ token\n      }\n    });\n    return next.handle(tokenizedrequest);\n\n  }\n}\n\n"],"mappings":";AAOA,OAAM,MAAOA,uBAAuB;EAElCC,YAAA,GAAgB;EAEhBC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAChD,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIC,gBAAgB,GAAGL,GAAG,CAACM,KAAK,CAAC;MAC/BC,UAAU,EAAC;QACTC,aAAa,EAAC,SAAS,GAAEN;;KAE5B,CAAC;IACF,OAAOD,IAAI,CAACQ,MAAM,CAACJ,gBAAgB,CAAC;EAEtC;;AAbWR,uBAAuB,C;mBAAvBA,uBAAuB;AAAA;AAAvBA,uBAAuB,C;SAAvBA,uBAAuB;EAAAa,OAAA,EAAvBb,uBAAuB,CAAAc,IAAA;EAAAC,UAAA,EAFtB;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}