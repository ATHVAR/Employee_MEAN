{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../authservice.service\";\nimport * as i3 from \"@angular/common\";\nfunction LoginComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Username is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Password is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class LoginComponent {\n  constructor(fb, authService) {\n    this.fb = fb;\n    this.authService = authService;\n  }\n  ngOnInit() {\n    this.loginForm = this.fb.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n  submitForm() {\n    if (this.loginForm.valid) {\n      const username = this.loginForm.get('username').value;\n      const password = this.loginForm.get('password').value;\n      this.authService.login(username, password).subscribe(response => {\n        // Handle successful login\n      }, error => {\n        // Handle login error\n      });\n    }\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthserviceService));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 13,\n  vars: 3,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [\"for\", \"username\"], [\"type\", \"text\", \"id\", \"username\", \"formControlName\", \"username\"], [4, \"ngIf\"], [\"for\", \"password\"], [\"type\", \"password\", \"id\", \"password\", \"formControlName\", \"password\"], [\"type\", \"submit\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.submitForm();\n      });\n      i0.ɵɵelementStart(1, \"div\")(2, \"label\", 1);\n      i0.ɵɵtext(3, \"Username\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"input\", 2);\n      i0.ɵɵtemplate(5, LoginComponent_div_5_Template, 2, 0, \"div\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"div\")(7, \"label\", 4);\n      i0.ɵɵtext(8, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(9, \"input\", 5);\n      i0.ɵɵtemplate(10, LoginComponent_div_10_Template, 2, 0, \"div\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"button\", 6);\n      i0.ɵɵtext(12, \"Login\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.loginForm.get(\"username\").invalid && ctx.loginForm.get(\"username\").touched);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.loginForm.get(\"password\").invalid && ctx.loginForm.get(\"password\").touched);\n    }\n  },\n  dependencies: [i3.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","LoginComponent","constructor","fb","authService","ngOnInit","loginForm","group","username","required","password","submitForm","valid","get","value","login","subscribe","response","error","ɵɵdirectiveInject","i1","FormBuilder","i2","AuthserviceService","selectors","decls","vars","consts","template","LoginComponent_Template","rf","ctx","ɵɵlistener","LoginComponent_Template_form_ngSubmit_0_listener","ɵɵelement","ɵɵtemplate","LoginComponent_div_5_Template","LoginComponent_div_10_Template","ɵɵproperty","ɵɵadvance","invalid","touched"],"sources":["C:\\Users\\ATHIRA\\Desktop\\kkemmar2023\\Employee_MEAN\\Frontend\\src\\app\\login\\login.component.ts","C:\\Users\\ATHIRA\\Desktop\\kkemmar2023\\Employee_MEAN\\Frontend\\src\\app\\login\\login.component.html"],"sourcesContent":["import { Component,OnInit } from '@angular/core';\nimport { FormsModule,ReactiveFormsModule,FormBuilder,FormGroup,Validators} from '@angular/forms';\nimport { AuthserviceService } from '../authservice.service';\n\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit{\n  loginForm: FormGroup;\n  constructor(private fb: FormBuilder, private authService:AuthserviceService) { }\n\n  ngOnInit(): void {\n    this.loginForm = this.fb.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n\n  submitForm(): void {\n    if (this.loginForm.valid) {\n      const username = this.loginForm.get('username').value;\n      const password = this.loginForm.get('password').value;\n      this.authService.login(username, password).subscribe(\n        (response) => {\n          // Handle successful login\n        },\n        (error) => {\n          // Handle login error\n        }\n      );\n    }\n  }\n}\n\n","<form [formGroup]=\"loginForm\" (ngSubmit)=\"submitForm()\">\n    <div>\n      <label for=\"username\">Username</label>\n      <input type=\"text\" id=\"username\" formControlName=\"username\">\n      <div *ngIf=\"loginForm.get('username').invalid && loginForm.get('username').touched\">\n        Username is required.\n      </div>\n    </div>\n    <div>\n      <label for=\"password\">Password</label>\n      <input type=\"password\" id=\"password\" formControlName=\"password\">\n      <div *ngIf=\"loginForm.get('password').invalid && loginForm.get('password').touched\">\n        Password is required.\n      </div>\n    </div>\n    <button type=\"submit\">Login</button>\n  </form>\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}